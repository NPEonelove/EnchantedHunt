{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\D_24\\\\Documents\\\\GitHub\\\\EnchantedHunt\\\\frontend\\\\hackaton\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/authService';\nimport { safeLocalStorage } from '../utils/localStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const initializeAuth = () => {\n      const token = safeLocalStorage.getItem('accessToken');\n      const userData = safeLocalStorage.getJSON('user');\n      if (token && userData) {\n        setCurrentUser({\n          ...userData,\n          token\n        });\n      }\n      setLoading(false);\n    };\n    initializeAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const response = await authService.signIn({\n        email: email,\n        password: password\n      });\n      const {\n        accessToken,\n        refreshToken,\n        user\n      } = response;\n      safeLocalStorage.setItem('accessToken', accessToken);\n      safeLocalStorage.setItem('refreshToken', refreshToken);\n      if (user && typeof user === 'object') {\n        safeLocalStorage.setJSON('user', user);\n        setCurrentUser({\n          ...user,\n          token: accessToken\n        });\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response2, _error$response2$data;\n      let errorMessage = 'Failed to login';\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        errorMessage = 'Invalid email or password';\n      } else if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const register = async (email, password, name) => {\n    try {\n      const response = await authService.signUp({\n        email: email,\n        password: password,\n        name: name\n      });\n      const {\n        accessToken,\n        refreshToken,\n        user\n      } = response;\n      safeLocalStorage.setItem('accessToken', accessToken);\n      safeLocalStorage.setItem('refreshToken', refreshToken);\n      if (user && typeof user === 'object') {\n        safeLocalStorage.setJSON('user', user);\n        setCurrentUser({\n          ...user,\n          token: accessToken\n        });\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response3, _error$response4, _error$response5, _error$response5$data;\n      let errorMessage = 'Failed to create account';\n\n      // Обработка конкретных ошибок\n      if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 409) {\n        errorMessage = 'User with this email already exists';\n      } else if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 400) {\n        var _error$response$data;\n        // Обработка ошибок валидации\n        if ((_error$response$data = error.response.data) !== null && _error$response$data !== void 0 && _error$response$data.message) {\n          errorMessage = error.response.data.message;\n        } else {\n          errorMessage = 'Invalid registration data';\n        }\n      } else if ((_error$response5 = error.response) !== null && _error$response5 !== void 0 && (_error$response5$data = _error$response5.data) !== null && _error$response5$data !== void 0 && _error$response5$data.message) {\n        errorMessage = error.response.data.message;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      safeLocalStorage.removeItem('accessToken');\n      safeLocalStorage.removeItem('refreshToken');\n      safeLocalStorage.removeItem('user');\n      setCurrentUser(null);\n    }\n  };\n  const value = {\n    currentUser,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","safeLocalStorage","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","initializeAuth","token","getItem","userData","getJSON","login","email","password","response","signIn","accessToken","refreshToken","user","setItem","setJSON","success","error","_error$response","_error$response2","_error$response2$data","errorMessage","status","data","message","register","name","signUp","_error$response3","_error$response4","_error$response5","_error$response5$data","_error$response$data","logout","console","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/D_24/Documents/GitHub/EnchantedHunt/frontend/hackaton/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { authService } from '../services/authService';\r\nimport { safeLocalStorage } from '../utils/localStorage';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const initializeAuth = () => {\r\n      const token = safeLocalStorage.getItem('accessToken');\r\n      const userData = safeLocalStorage.getJSON('user');\r\n      \r\n      if (token && userData) {\r\n        setCurrentUser({ ...userData, token });\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await authService.signIn({\r\n        email: email,\r\n        password: password\r\n      });\r\n\r\n      const { accessToken, refreshToken, user } = response;\r\n      \r\n      safeLocalStorage.setItem('accessToken', accessToken);\r\n      safeLocalStorage.setItem('refreshToken', refreshToken);\r\n      \r\n      if (user && typeof user === 'object') {\r\n        safeLocalStorage.setJSON('user', user);\r\n        setCurrentUser({ ...user, token: accessToken });\r\n      }\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      let errorMessage = 'Failed to login';\r\n      \r\n      if (error.response?.status === 401) {\r\n        errorMessage = 'Invalid email or password';\r\n      } else if (error.response?.data?.message) {\r\n        errorMessage = error.response.data.message;\r\n      } else if (error.message) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  const register = async (email, password, name) => {\r\n    try {\r\n      const response = await authService.signUp({\r\n        email: email,\r\n        password: password,\r\n        name: name\r\n      });\r\n\r\n      const { accessToken, refreshToken, user } = response;\r\n      \r\n      safeLocalStorage.setItem('accessToken', accessToken);\r\n      safeLocalStorage.setItem('refreshToken', refreshToken);\r\n      \r\n      if (user && typeof user === 'object') {\r\n        safeLocalStorage.setJSON('user', user);\r\n        setCurrentUser({ ...user, token: accessToken });\r\n      }\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      let errorMessage = 'Failed to create account';\r\n      \r\n      // Обработка конкретных ошибок\r\n      if (error.response?.status === 409) {\r\n        errorMessage = 'User with this email already exists';\r\n      } else if (error.response?.status === 400) {\r\n        // Обработка ошибок валидации\r\n        if (error.response.data?.message) {\r\n          errorMessage = error.response.data.message;\r\n        } else {\r\n          errorMessage = 'Invalid registration data';\r\n        }\r\n      } else if (error.response?.data?.message) {\r\n        errorMessage = error.response.data.message;\r\n      } else if (error.message) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await authService.logout();\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      safeLocalStorage.removeItem('accessToken');\r\n      safeLocalStorage.removeItem('refreshToken');\r\n      safeLocalStorage.removeItem('user');\r\n      setCurrentUser(null);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    register,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}