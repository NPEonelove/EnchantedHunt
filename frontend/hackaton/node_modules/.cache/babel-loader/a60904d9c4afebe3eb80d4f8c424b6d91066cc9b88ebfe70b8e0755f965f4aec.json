{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\D_24\\\\Documents\\\\GitHub\\\\EnchantedHunt\\\\frontend\\\\hackaton\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Проверяем, есть ли токен в localStorage при загрузке\n    const token = localStorage.getItem('token');\n    if (token) {\n      // Здесь можно добавить проверку валидности токена\n      setCurrentUser({\n        token\n      });\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    try {\n      // Здесь будет вызов API\n      const response = await fakeAuthAPI(email, password);\n      const {\n        token,\n        user\n      } = response;\n      localStorage.setItem('token', token);\n      setCurrentUser({\n        ...user,\n        token\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const register = async (email, password, name) => {\n    try {\n      // Здесь будет вызов API для регистрации\n      const response = await fakeRegisterAPI(email, password, name);\n      const {\n        token,\n        user\n      } = response;\n      localStorage.setItem('token', token);\n      setCurrentUser({\n        ...user,\n        token\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    setCurrentUser(null);\n  };\n  const value = {\n    currentUser,\n    login,\n    register,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n// Заглушки для API (замените на реальные вызовы)\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nconst fakeAuthAPI = (email, password) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (email === 'test@example.com' && password === 'password') {\n        resolve({\n          token: 'fake-jwt-token',\n          user: {\n            id: 1,\n            email,\n            name: 'Test User',\n            position: 'Frontend Developer',\n            department: 'IT Department'\n          }\n        });\n      } else {\n        reject(new Error('Invalid credentials'));\n      }\n    }, 1000);\n  });\n};\nconst fakeRegisterAPI = (email, password, name) => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        token: 'fake-jwt-token',\n        user: {\n          id: Date.now(),\n          email,\n          name,\n          position: '',\n          department: ''\n        }\n      });\n    }, 1000);\n  });\n};\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","token","localStorage","getItem","login","email","password","response","fakeAuthAPI","user","setItem","success","error","message","register","name","fakeRegisterAPI","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","Promise","resolve","reject","setTimeout","id","position","department","Error","Date","now","$RefreshReg$"],"sources":["C:/Users/D_24/Documents/GitHub/EnchantedHunt/frontend/hackaton/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Проверяем, есть ли токен в localStorage при загрузке\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      // Здесь можно добавить проверку валидности токена\r\n      setCurrentUser({ token });\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      // Здесь будет вызов API\r\n      const response = await fakeAuthAPI(email, password);\r\n      const { token, user } = response;\r\n      \r\n      localStorage.setItem('token', token);\r\n      setCurrentUser({ ...user, token });\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const register = async (email, password, name) => {\r\n    try {\r\n      // Здесь будет вызов API для регистрации\r\n      const response = await fakeRegisterAPI(email, password, name);\r\n      const { token, user } = response;\r\n      \r\n      localStorage.setItem('token', token);\r\n      setCurrentUser({ ...user, token });\r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    setCurrentUser(null);\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    register,\r\n    logout\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Заглушки для API (замените на реальные вызовы)\r\nconst fakeAuthAPI = (email, password) => {\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (email === 'test@example.com' && password === 'password') {\r\n        resolve({\r\n          token: 'fake-jwt-token',\r\n          user: { \r\n            id: 1, \r\n            email, \r\n            name: 'Test User',\r\n            position: 'Frontend Developer',\r\n            department: 'IT Department'\r\n          }\r\n        });\r\n      } else {\r\n        reject(new Error('Invalid credentials'));\r\n      }\r\n    }, 1000);\r\n  });\r\n};\r\n\r\nconst fakeRegisterAPI = (email, password, name) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve({\r\n        token: 'fake-jwt-token',\r\n        user: { \r\n          id: Date.now(), \r\n          email, \r\n          name,\r\n          position: '',\r\n          department: ''\r\n        }\r\n      });\r\n    }, 1000);\r\n  });\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}