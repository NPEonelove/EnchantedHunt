{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\D_24\\\\Documents\\\\GitHub\\\\EnchantedHunt\\\\frontend\\\\hackaton\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authService } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const initializeAuth = () => {\n      try {\n        const token = localStorage.getItem('accessToken');\n        const userData = localStorage.getItem('user');\n\n        // Проверяем, что userData существует и не является undefined\n        if (token && userData && userData !== 'undefined') {\n          const parsedUser = JSON.parse(userData);\n          setCurrentUser({\n            ...parsedUser,\n            token\n          });\n        }\n      } catch (error) {\n        console.error('Error parsing user data from localStorage:', error);\n        // Очищаем некорректные данные\n        localStorage.removeItem('accessToken');\n        localStorage.removeItem('refreshToken');\n        localStorage.removeItem('user');\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      const response = await authService.signIn({\n        email: email,\n        password: password\n      });\n      const {\n        accessToken,\n        refreshToken,\n        user\n      } = response;\n\n      // Сохраняем токены и данные пользователя\n      localStorage.setItem('accessToken', accessToken);\n      localStorage.setItem('refreshToken', refreshToken);\n\n      // Убеждаемся, что user - валидный объект\n      if (user && typeof user === 'object') {\n        localStorage.setItem('user', JSON.stringify(user));\n        setCurrentUser({\n          ...user,\n          token: accessToken\n        });\n      } else {\n        throw new Error('Invalid user data received from server');\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response;\n      let errorMessage = 'Failed to login';\n      if ((_error$response = error.response) !== null && _error$response !== void 0 && _error$response.data) {\n        errorMessage = error.response.data.message || errorMessage;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const register = async (email, password, name) => {\n    try {\n      const response = await authService.signUp({\n        email: email,\n        password: password,\n        name: name\n      });\n      const {\n        accessToken,\n        refreshToken,\n        user\n      } = response;\n      localStorage.setItem('accessToken', accessToken);\n      localStorage.setItem('refreshToken', refreshToken);\n\n      // Убеждаемся, что user - валидный объект\n      if (user && typeof user === 'object') {\n        localStorage.setItem('user', JSON.stringify(user));\n        setCurrentUser({\n          ...user,\n          token: accessToken\n        });\n      } else {\n        throw new Error('Invalid user data received from server');\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2;\n      let errorMessage = 'Failed to create account';\n      if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && _error$response2.data) {\n        errorMessage = error.response.data.message || errorMessage;\n      } else if (error.message) {\n        errorMessage = error.message;\n      }\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n  const logout = async () => {\n    try {\n      await authService.logout();\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      localStorage.removeItem('accessToken');\n      localStorage.removeItem('refreshToken');\n      localStorage.removeItem('user');\n      setCurrentUser(null);\n    }\n  };\n  const refreshAuthToken = async () => {\n    try {\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken) {\n        throw new Error('No refresh token available');\n      }\n      const response = await authService.refreshToken(refreshToken);\n      const {\n        accessToken,\n        refreshToken: newRefreshToken\n      } = response;\n      localStorage.setItem('accessToken', accessToken);\n      localStorage.setItem('refreshToken', newRefreshToken);\n      return accessToken;\n    } catch (error) {\n      logout();\n      throw error;\n    }\n  };\n  const value = {\n    currentUser,\n    login,\n    register,\n    logout,\n    refreshAuthToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 151,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"+Bt7EujFHjK6mRV3YX1iAtSqXvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","currentUser","setCurrentUser","loading","setLoading","initializeAuth","token","localStorage","getItem","userData","parsedUser","JSON","parse","error","console","removeItem","login","email","password","response","signIn","accessToken","refreshToken","user","setItem","stringify","Error","success","_error$response","errorMessage","data","message","register","name","signUp","_error$response2","logout","refreshAuthToken","newRefreshToken","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/D_24/Documents/GitHub/EnchantedHunt/frontend/hackaton/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { authService } from '../services/authService';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const initializeAuth = () => {\r\n      try {\r\n        const token = localStorage.getItem('accessToken');\r\n        const userData = localStorage.getItem('user');\r\n        \r\n        // Проверяем, что userData существует и не является undefined\r\n        if (token && userData && userData !== 'undefined') {\r\n          const parsedUser = JSON.parse(userData);\r\n          setCurrentUser({ ...parsedUser, token });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing user data from localStorage:', error);\r\n        // Очищаем некорректные данные\r\n        localStorage.removeItem('accessToken');\r\n        localStorage.removeItem('refreshToken');\r\n        localStorage.removeItem('user');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await authService.signIn({\r\n        email: email,\r\n        password: password\r\n      });\r\n\r\n      const { accessToken, refreshToken, user } = response;\r\n      \r\n      // Сохраняем токены и данные пользователя\r\n      localStorage.setItem('accessToken', accessToken);\r\n      localStorage.setItem('refreshToken', refreshToken);\r\n      \r\n      // Убеждаемся, что user - валидный объект\r\n      if (user && typeof user === 'object') {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        setCurrentUser({ ...user, token: accessToken });\r\n      } else {\r\n        throw new Error('Invalid user data received from server');\r\n      }\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      let errorMessage = 'Failed to login';\r\n      \r\n      if (error.response?.data) {\r\n        errorMessage = error.response.data.message || errorMessage;\r\n      } else if (error.message) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  const register = async (email, password, name) => {\r\n    try {\r\n      const response = await authService.signUp({\r\n        email: email,\r\n        password: password,\r\n        name: name\r\n      });\r\n\r\n      const { accessToken, refreshToken, user } = response;\r\n      \r\n      localStorage.setItem('accessToken', accessToken);\r\n      localStorage.setItem('refreshToken', refreshToken);\r\n      \r\n      // Убеждаемся, что user - валидный объект\r\n      if (user && typeof user === 'object') {\r\n        localStorage.setItem('user', JSON.stringify(user));\r\n        setCurrentUser({ ...user, token: accessToken });\r\n      } else {\r\n        throw new Error('Invalid user data received from server');\r\n      }\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      let errorMessage = 'Failed to create account';\r\n      \r\n      if (error.response?.data) {\r\n        errorMessage = error.response.data.message || errorMessage;\r\n      } else if (error.message) {\r\n        errorMessage = error.message;\r\n      }\r\n      \r\n      return { success: false, error: errorMessage };\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await authService.logout();\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      localStorage.removeItem('accessToken');\r\n      localStorage.removeItem('refreshToken');\r\n      localStorage.removeItem('user');\r\n      setCurrentUser(null);\r\n    }\r\n  };\r\n\r\n  const refreshAuthToken = async () => {\r\n    try {\r\n      const refreshToken = localStorage.getItem('refreshToken');\r\n      if (!refreshToken) {\r\n        throw new Error('No refresh token available');\r\n      }\r\n\r\n      const response = await authService.refreshToken(refreshToken);\r\n      const { accessToken, refreshToken: newRefreshToken } = response;\r\n      \r\n      localStorage.setItem('accessToken', accessToken);\r\n      localStorage.setItem('refreshToken', newRefreshToken);\r\n      \r\n      return accessToken;\r\n    } catch (error) {\r\n      logout();\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    register,\r\n    logout,\r\n    refreshAuthToken\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}