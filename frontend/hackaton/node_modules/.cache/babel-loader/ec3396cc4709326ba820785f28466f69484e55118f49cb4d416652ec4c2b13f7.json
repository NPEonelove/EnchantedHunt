{"ast":null,"code":"import axios from 'axios';\n\n// Для разработки используем относительный путь (прокси)\n// Для продакшена нужно будет изменить на абсолютный URL\nconst API_URL = process.env.NODE_ENV === 'production' ? 'https://your-production-domain.com/api/v1/auth' : '/api/v1/auth';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Интерцептор для добавления токена к запросам\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('accessToken');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Интерцептор для обработки ошибок авторизации\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Токен истек или невалиден\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nexport const authService = {\n  // Регистрация\n  signUp: async userData => {\n    const response = await api.post('/sign-up', userData);\n    return response.data;\n  },\n  // Вход\n  signIn: async credentials => {\n    const response = await api.post('/sign-in', credentials);\n    return response.data;\n  },\n  // Обновление токена\n  refreshToken: async refreshToken => {\n    const response = await api.post('/refresh-access-token', {\n      refreshToken: refreshToken\n    });\n    return response.data;\n  },\n  // Выход\n  logout: async () => {\n    localStorage.removeItem('accessToken');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('user');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","NODE_ENV","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","authService","signUp","userData","post","data","signIn","credentials","refreshToken","logout"],"sources":["C:/Users/D_24/Documents/GitHub/EnchantedHunt/frontend/hackaton/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Для разработки используем относительный путь (прокси)\r\n// Для продакшена нужно будет изменить на абсолютный URL\r\nconst API_URL = process.env.NODE_ENV === 'production' \r\n  ? 'https://your-production-domain.com/api/v1/auth' \r\n  : '/api/v1/auth';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Интерцептор для добавления токена к запросам\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('accessToken');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Интерцептор для обработки ошибок авторизации\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Токен истек или невалиден\r\n      localStorage.removeItem('accessToken');\r\n      localStorage.removeItem('refreshToken');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport const authService = {\r\n  // Регистрация\r\n  signUp: async (userData) => {\r\n    const response = await api.post('/sign-up', userData);\r\n    return response.data;\r\n  },\r\n\r\n  // Вход\r\n  signIn: async (credentials) => {\r\n    const response = await api.post('/sign-in', credentials);\r\n    return response.data;\r\n  },\r\n\r\n  // Обновление токена\r\n  refreshToken: async (refreshToken) => {\r\n    const response = await api.post('/refresh-access-token', {\r\n      refreshToken: refreshToken\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  // Выход\r\n  logout: async () => {\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('refreshToken');\r\n    localStorage.removeItem('user');\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GACjD,gDAAgD,GAChD,cAAc;AAElB,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACjD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACI,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAC1BM,QAAQ,IAAKA,QAAQ,EACrBC,KAAK,IAAK;EAAA,IAAAC,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAD,KAAK,CAACD,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACAN,YAAY,CAACO,UAAU,CAAC,aAAa,CAAC;IACtCP,YAAY,CAACO,UAAU,CAAC,cAAc,CAAC;IACvCP,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC;EACA,OAAOC,OAAO,CAACC,MAAM,CAACR,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMS,WAAW,GAAG;EACzB;EACAC,MAAM,EAAE,MAAOC,QAAQ,IAAK;IAC1B,MAAMZ,QAAQ,GAAG,MAAMZ,GAAG,CAACyB,IAAI,CAAC,UAAU,EAAED,QAAQ,CAAC;IACrD,OAAOZ,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED;EACAC,MAAM,EAAE,MAAOC,WAAW,IAAK;IAC7B,MAAMhB,QAAQ,GAAG,MAAMZ,GAAG,CAACyB,IAAI,CAAC,UAAU,EAAEG,WAAW,CAAC;IACxD,OAAOhB,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED;EACAG,YAAY,EAAE,MAAOA,YAAY,IAAK;IACpC,MAAMjB,QAAQ,GAAG,MAAMZ,GAAG,CAACyB,IAAI,CAAC,uBAAuB,EAAE;MACvDI,YAAY,EAAEA;IAChB,CAAC,CAAC;IACF,OAAOjB,QAAQ,CAACc,IAAI;EACtB,CAAC;EAED;EACAI,MAAM,EAAE,MAAAA,CAAA,KAAY;IAClBrB,YAAY,CAACO,UAAU,CAAC,aAAa,CAAC;IACtCP,YAAY,CAACO,UAAU,CAAC,cAAc,CAAC;IACvCP,YAAY,CAACO,UAAU,CAAC,MAAM,CAAC;EACjC;AACF,CAAC;AAED,eAAehB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}