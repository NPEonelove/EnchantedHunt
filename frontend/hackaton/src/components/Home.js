import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import './Home.css';

function Home() {
  const { currentUser, logout } = useAuth();
  const [activeTab, setActiveTab] = useState('profile');

  return (
    <div className="home-container">
      {/* –•–µ–¥–µ—Ä */}
      <header className="home-header">
        <div className="header-content">
          <h1>Enchanted Hunt</h1>
          <div className="header-actions">
            <span className="user-email">{currentUser.email}</span>
            <button onClick={logout} className="logout-btn">–í—ã–π—Ç–∏</button>
          </div>
        </div>
      </header>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ */}
      <nav className="tabs-navigation">
        <button 
          className={`tab-btn ${activeTab === 'profile' ? 'active' : ''}`}
          onClick={() => setActiveTab('profile')}
        >
          üë§ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        </button>
        <button 
          className={`tab-btn ${activeTab === 'vacancies' ? 'active' : ''}`}
          onClick={() => setActiveTab('vacancies')}
        >
          üíº –í–∞–∫–∞–Ω—Å–∏–∏
        </button>
      </nav>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
      <main className="tab-content">
        {activeTab === 'profile' && <ProfileTab />}
        {activeTab === 'vacancies' && <VacanciesTab />}
      </main>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ "–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
function ProfileTab() {
  const { currentUser } = useAuth();
  const [isEditing, setIsEditing] = useState(false);
  const [profile, setProfile] = useState({
    fullName: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
    position: 'Frontend Developer',
    department: 'IT',
    skills: ['React', 'JavaScript', 'CSS', 'HTML'],
    experience: '3 –≥–æ–¥–∞',
    level: 'Middle',
    phone: '+7 (999) 123-45-67',
    location: '–ú–æ—Å–∫–≤–∞',
    bio: '–û–ø—ã—Ç–Ω—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å passion –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.'
  });

  const [editForm, setEditForm] = useState(profile);

  const handleEdit = () => {
    setEditForm(profile);
    setIsEditing(true);
  };

  const handleSave = () => {
    setProfile(editForm);
    setIsEditing(false);
  };

  const handleCancel = () => {
    setEditForm(profile);
    setIsEditing(false);
  };

  const handleInputChange = (field, value) => {
    setEditForm(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const handleSkillsChange = (newSkills) => {
    setEditForm(prev => ({
      ...prev,
      skills: newSkills.split(',').map(skill => skill.trim()).filter(skill => skill)
    }));
  };

  return (
    <div className="profile-tab">
      <div className="profile-header">
        <h2>–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</h2>
        <p>–õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</p>
        {!isEditing && (
          <button className="edit-btn" onClick={handleEdit}>
            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
          </button>
        )}
      </div>

      <div className="profile-horizontal-layout">
        {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="profile-column">
          <div className="profile-card">
            <h3>üë§ –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            {isEditing ? (
              <div className="edit-form">
                <div className="form-group">
                  <label>–§–ò–û:</label>
                  <input
                    type="text"
                    value={editForm.fullName}
                    onChange={(e) => handleInputChange('fullName', e.target.value)}
                    className="edit-input"
                  />
                </div>
                <div className="form-group">
                  <label>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</label>
                  <input
                    type="text"
                    value={editForm.position}
                    onChange={(e) => handleInputChange('position', e.target.value)}
                    className="edit-input"
                  />
                </div>
                <div className="form-group">
                  <label>–û—Ç–¥–µ–ª:</label>
                  <select
                    value={editForm.department}
                    onChange={(e) => handleInputChange('department', e.target.value)}
                    className="edit-input"
                  >
                    <option value="IT">IT</option>
                    <option value="Design">Design</option>
                    <option value="Marketing">Marketing</option>
                    <option value="HR">HR</option>
                    <option value="Finance">Finance</option>
                  </select>
                </div>
                <div className="form-group">
                  <label>–£—Ä–æ–≤–µ–Ω—å:</label>
                  <select
                    value={editForm.level}
                    onChange={(e) => handleInputChange('level', e.target.value)}
                    className="edit-input"
                  >
                    <option value="Junior">Junior</option>
                    <option value="Middle">Middle</option>
                    <option value="Senior">Senior</option>
                    <option value="Lead">Lead</option>
                  </select>
                </div>
                <div className="form-group">
                  <label>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</label>
                  <input
                    type="text"
                    value={editForm.experience}
                    onChange={(e) => handleInputChange('experience', e.target.value)}
                    className="edit-input"
                  />
                </div>
              </div>
            ) : (
              <>
                <div className="info-item">
                  <span className="label">Email:</span>
                  <span className="value">{currentUser.email}</span>
                </div>
                <div className="info-item">
                  <span className="label">–§–ò–û:</span>
                  <span className="value">{profile.fullName}</span>
                </div>
                <div className="info-item">
                  <span className="label">–î–æ–ª–∂–Ω–æ—Å—Ç—å:</span>
                  <span className="value">{profile.position}</span>
                </div>
                <div className="info-item">
                  <span className="label">–û—Ç–¥–µ–ª:</span>
                  <span className="value">{profile.department}</span>
                </div>
                <div className="info-item">
                  <span className="label">–£—Ä–æ–≤–µ–Ω—å:</span>
                  <span className="value level-badge">{profile.level}</span>
                </div>
                <div className="info-item">
                  <span className="label">–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</span>
                  <span className="value">{profile.experience}</span>
                </div>
              </>
            )}
          </div>

          <div className="profile-card">
            <h3>üìù –û —Å–µ–±–µ</h3>
            {isEditing ? (
              <div className="form-group">
                <textarea
                  value={editForm.bio}
                  onChange={(e) => handleInputChange('bio', e.target.value)}
                  className="edit-textarea"
                  rows="4"
                  placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ..."
                />
              </div>
            ) : (
              <p className="bio-text">{profile.bio}</p>
            )}
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ù–∞–≤—ã–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã */}
        <div className="profile-column">
          <div className="profile-card">
            <h3>üéØ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏</h3>
            {isEditing ? (
              <div className="form-group">
                <label>–ù–∞–≤—ã–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</label>
                <input
                  type="text"
                  value={editForm.skills.join(', ')}
                  onChange={(e) => handleSkillsChange(e.target.value)}
                  className="edit-input"
                  placeholder="React, JavaScript, CSS..."
                />
              </div>
            ) : (
              <div className="skills-list">
                {profile.skills.map((skill, index) => (
                  <span key={index} className="skill-tag">{skill}</span>
                ))}
              </div>
            )}
          </div>

          <div className="profile-card">
            <h3>üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
            {isEditing ? (
              <div className="edit-form">
                <div className="form-group">
                  <label>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
                  <input
                    type="tel"
                    value={editForm.phone}
                    onChange={(e) => handleInputChange('phone', e.target.value)}
                    className="edit-input"
                  />
                </div>
                <div className="form-group">
                  <label>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</label>
                  <input
                    type="text"
                    value={editForm.location}
                    onChange={(e) => handleInputChange('location', e.target.value)}
                    className="edit-input"
                  />
                </div>
              </div>
            ) : (
              <>
                <div className="info-item">
                  <span className="label">–¢–µ–ª–µ—Ñ–æ–Ω:</span>
                  <span className="value">{profile.phone}</span>
                </div>
                <div className="info-item">
                  <span className="label">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</span>
                  <span className="value">{profile.location}</span>
                </div>
              </>
            )}
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
          {isEditing && (
            <div className="profile-card">
              <h3>üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π</h3>
              <div className="edit-actions">
                <button className="save-btn" onClick={handleSave}>
                  ‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                </button>
                <button className="cancel-btn" onClick={handleCancel}>
                  ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –≤–∫–ª–∞–¥–∫–∏ "–í–∞–∫–∞–Ω—Å–∏–∏" —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º layout
function VacanciesTab() {
  const [vacancies] = useState([
    {
      id: 1,
      title: 'Senior React Developer',
      department: 'Frontend',
      level: 'Senior',
      location: '–ú–æ—Å–∫–≤–∞ / –£–¥–∞–ª–µ–Ω–Ω–æ',
      salary: '–æ—Ç 200 000 ‚ÇΩ',
      skills: ['React', 'TypeScript', 'Redux', 'Webpack'],
      status: 'active',
      applicants: 15,
      description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ–∂–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –¥–ª—è –≤—ã—Å–æ–∫–æ–Ω–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.'
    },
    {
      id: 2,
      title: 'DevOps Engineer',
      department: 'Infrastructure',
      level: 'Middle+',
      location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      salary: '–æ—Ç 180 000 ‚ÇΩ',
      skills: ['Docker', 'Kubernetes', 'AWS', 'CI/CD'],
      status: 'active',
      applicants: 8,
      description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.'
    },
    {
      id: 3,
      title: 'Backend Developer (Node.js)',
      department: 'Backend',
      level: 'Middle',
      location: '–£–¥–∞–ª–µ–Ω–Ω–æ',
      salary: '–æ—Ç 150 000 ‚ÇΩ',
      skills: ['Node.js', 'PostgreSQL', 'Redis', 'REST API'],
      status: 'active',
      applicants: 12,
      description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, —Ä–∞–±–æ—Ç–∞ —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.'
    },
    {
      id: 4,
      title: 'UI/UX Designer',
      department: 'Design',
      level: 'Junior+',
      location: '–ú–æ—Å–∫–≤–∞',
      salary: '–æ—Ç 120 000 ‚ÇΩ',
      skills: ['Figma', 'Adobe XD', 'Prototyping', 'User Research'],
      status: 'active',
      applicants: 25,
      description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞.'
    },
    {
      id: 5,
      title: 'Data Scientist',
      department: 'Data',
      level: 'Senior',
      location: '–£–¥–∞–ª–µ–Ω–Ω–æ',
      salary: '–æ—Ç 220 000 ‚ÇΩ',
      skills: ['Python', 'Machine Learning', 'SQL', 'TensorFlow'],
      status: 'active',
      applicants: 7,
      description: '–ê–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ ML-–º–æ–¥–µ–ª–µ–π, —Ä–∞–±–æ—Ç–∞ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏.'
    },
    {
      id: 6,
      title: 'QA Automation Engineer',
      department: 'Testing',
      level: 'Middle',
      location: '–ú–æ—Å–∫–≤–∞',
      salary: '–æ—Ç 140 000 ‚ÇΩ',
      skills: ['Selenium', 'Java', 'TestNG', 'Jenkins'],
      status: 'active',
      applicants: 9,
      description: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞.'
    }
  ]);

  const [selectedDepartment, setSelectedDepartment] = useState('all');
  const [selectedLevel, setSelectedLevel] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');

  const filteredVacancies = vacancies.filter(vacancy => {
    const matchesDepartment = selectedDepartment === 'all' || vacancy.department === selectedDepartment;
    const matchesLevel = selectedLevel === 'all' || vacancy.level === selectedLevel;
    const matchesSearch = vacancy.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         vacancy.description.toLowerCase().includes(searchTerm.toLowerCase());
    
    return matchesDepartment && matchesLevel && matchesSearch;
  });

  return (
    <div className="vacancies-tab">
      <div className="vacancies-header">
        <h2>–û—Ç–∫—Ä—ã—Ç—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏</h2>
        <p>–ù–∞–π–¥–∏—Ç–µ —Å–≤–æ—é —Å–ª–µ–¥—É—é—â—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤ Enchanted Hunt</p>
      </div>

      {/* –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫ */}
      <div className="vacancies-filters">
        <div className="search-box">
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="search-input"
          />
        </div>
        
        <div className="filter-group">
          <select 
            value={selectedDepartment} 
            onChange={(e) => setSelectedDepartment(e.target.value)}
            className="filter-select"
          >
            <option value="all">–í—Å–µ –æ—Ç–¥–µ–ª—ã</option>
            <option value="Frontend">Frontend</option>
            <option value="Backend">Backend</option>
            <option value="Infrastructure">Infrastructure</option>
            <option value="Design">Design</option>
            <option value="Data">Data</option>
            <option value="Testing">Testing</option>
          </select>

          <select 
            value={selectedLevel} 
            onChange={(e) => setSelectedLevel(e.target.value)}
            className="filter-select"
          >
            <option value="all">–í—Å–µ —É—Ä–æ–≤–Ω–∏</option>
            <option value="Junior">Junior</option>
            <option value="Middle">Middle</option>
            <option value="Senior">Senior</option>
            <option value="Lead">Lead</option>
          </select>
        </div>
      </div>

      {/* –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π */}
      <div className="vacancies-horizontal-grid">
        {filteredVacancies.map(vacancy => (
          <div key={vacancy.id} className="vacancy-card-horizontal">
            <div className="vacancy-card-header">
              <h3>{vacancy.title}</h3>
              <span className={`status-badge ${vacancy.status}`}>
                {vacancy.status === 'active' ? '–ê–∫—Ç–∏–≤–Ω–∞' : '–ó–∞–∫—Ä—ã—Ç–∞'}
              </span>
            </div>
            
            <div className="vacancy-card-body">
              <div className="vacancy-meta">
                <div className="meta-item">
                  <span className="meta-label">–û—Ç–¥–µ–ª</span>
                  <span className="meta-value">{vacancy.department}</span>
                </div>
                <div className="meta-item">
                  <span className="meta-label">–£—Ä–æ–≤–µ–Ω—å</span>
                  <span className="meta-value">{vacancy.level}</span>
                </div>
                <div className="meta-item">
                  <span className="meta-label">–õ–æ–∫–∞—Ü–∏—è</span>
                  <span className="meta-value">{vacancy.location}</span>
                </div>
                <div className="meta-item">
                  <span className="meta-label">–ó–∞—Ä–ø–ª–∞—Ç–∞</span>
                  <span className="meta-value salary">{vacancy.salary}</span>
                </div>
              </div>

              <div className="vacancy-description">
                <p>{vacancy.description}</p>
              </div>

              <div className="vacancy-skills">
                <h4>–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏:</h4>
                <div className="skills-list">
                  {vacancy.skills.map((skill, index) => (
                    <span key={index} className="skill-tag">{skill}</span>
                  ))}
                </div>
              </div>
            </div>

            <div className="vacancy-card-footer">
              <div className="applicants-info">
                <span className="applicants-count">{vacancy.applicants}</span>
                <span className="applicants-label">–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤</span>
              </div>
              <div className="vacancy-actions">
                <button className="details-btn">
                  üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                </button>
                <button className="apply-btn">
                  üì® –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {filteredVacancies.length === 0 && (
        <div className="no-vacancies">
          <h3>üòî –í–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã</p>
        </div>
      )}
    </div>
  );
}

export default Home;