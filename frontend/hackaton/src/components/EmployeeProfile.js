import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { useAuth } from '../context/AuthContext';
import ResumeForm from './ResumeForm';
import './EmployeeProfile.css';

const EmployeeProfile = () => {
  const { currentUser, logout } = useAuth();
  const [isEditing, setIsEditing] = useState(false);
  const [activeTab, setActiveTab] = useState('profile');

  const [employeeData, setEmployeeData] = useState({
    position: 'Frontend Developer',
    department: 'IT Department',
    hireDate: '2024-01-15',
    phone: '+7 (999) 123-45-67',
    level: 'Middle',
    experience: '3 –≥–æ–¥–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –Ω–∞ React',
    education: '–í—ã—Å—à–µ–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ',
    languages: 'English (Intermediate), Russian (Native)',
    responsibilities: [
      '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
      '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
      '–ö–æ–¥-—Ä–µ–≤—å—é',
      '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π'
    ],
    skills: ['React', 'JavaScript', 'TypeScript', 'CSS', 'HTML', 'Redux', 'Git'],
    resume: ''
  });

  const [vacancies] = useState([
    {
      id: 1,
      title: 'Senior React Developer',
      department: 'IT Department',
      level: 'Senior',
      location: '–ú–æ—Å–∫–≤–∞ / –£–¥–∞–ª–µ–Ω–Ω–æ',
      salary: '–æ—Ç 200 000 —Ä—É–±.',
      requirements: ['5+ –ª–µ—Ç –æ–ø—ã—Ç–∞ —Å React', 'TypeScript', 'Redux', '–û–ø—ã—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π'],
      status: 'active'
    },
    {
      id: 2,
      title: 'Frontend Team Lead',
      department: 'Product Development',
      level: 'Lead',
      location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      salary: '–æ—Ç 300 000 —Ä—É–±.',
      requirements: ['7+ –ª–µ—Ç –æ–ø—ã—Ç–∞', 'React, Vue –∏–ª–∏ Angular', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π 5+ —á–µ–ª–æ–≤–µ–∫', '–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –Ω–∞–≤—ã–∫–∏'],
      status: 'active'
    }
  ]);

  const handleLogout = () => {
    logout();
  };

  const handleSaveResume = (resumeData) => {
    setEmployeeData(prev => ({
      ...prev,
      ...resumeData
    }));
    setIsEditing(false);
  };

  const InfoItem = ({ label, value, color }) => (
    <div className="info-item" style={{ borderLeftColor: color }}>
      <span className="label" style={{ color }}>{label}:</span>
      <span className="value">{value}</span>
    </div>
  );

  const BulletedItem = ({ children, color }) => (
    <div className="bulleted-item">
      <span className="bullet" style={{ color }}>‚Ä¢</span>
      <span>{children}</span>
    </div>
  );

  const renderProfileTab = () => (
    !isEditing ? (
      <motion.div 
        className="profile-content"
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5, delay: 0.2 }}
      >
        <div className="left-column">
          <motion.div 
            className="info-card personal-card"
            initial={{ x: -50, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            transition={{ duration: 0.5, delay: 0.3 }}
          >
            <h2>üë§ Personal Information</h2>
            <div className="info-grid">
              <InfoItem label="Full Name" value={currentUser.name} color="#667eea" />
              <InfoItem label="Email" value={currentUser.email} color="#667eea" />
              <InfoItem label="Phone" value={employeeData.phone} color="#667eea" />
              <InfoItem label="Employee ID" value={currentUser.id} color="#667eea" />
            </div>
          </motion.div>

          <motion.div 
            className="info-card work-card"
            initial={{ x: -50, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            transition={{ duration: 0.5, delay: 0.4 }}
          >
            <h2>üíº Work Information</h2>
            <div className="info-grid">
              <InfoItem label="Position" value={employeeData.position} color="#ed8936" />
              <InfoItem label="Department" value={employeeData.department} color="#ed8936" />
              <InfoItem label="Level" value={employeeData.level} color="#ed8936" />
              <InfoItem label="Hire Date" value={employeeData.hireDate} color="#ed8936" />
            </div>
          </motion.div>
        </div>

        <div className="center-column">
          <motion.div 
            className="info-card skills-card"
            initial={{ y: 50, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ duration: 0.5, delay: 0.5 }}
          >
            <h2>üöÄ Skills & Technologies</h2>
            <div className="skills-grid">
              {employeeData.skills.map((skill, index) => (
                <motion.span
                  key={index}
                  className="skill-tag"
                  whileHover={{ scale: 1.05, y: -2 }}
                  transition={{ duration: 0.2 }}
                >
                  {skill}
                </motion.span>
              ))}
            </div>
          </motion.div>

          <motion.div 
            className="info-card responsibilities-card"
            initial={{ y: 50, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ duration: 0.5, delay: 0.6 }}
          >
            <h2>üìã Responsibilities</h2>
            <div className="bulleted-list">
              {employeeData.responsibilities.map((responsibility, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.3, delay: index * 0.1 }}
                >
                  <BulletedItem color="#48bb78">{responsibility}</BulletedItem>
                </motion.div>
              ))}
            </div>
          </motion.div>
        </div>

        <div className="right-column">
          <motion.div 
            className="info-card experience-card"
            initial={{ x: 50, opacity: 0 }}
            animate={{ x: 0, opacity: 1 }}
            transition={{ duration: 0.5, delay: 0.7 }}
          >
            <h2>üéì Experience & Education</h2>
            <div className="bulleted-list">
              <BulletedItem color="#f56565">
                <strong>Experience:</strong> {employeeData.experience}
              </BulletedItem>
              <BulletedItem color="#f56565">
                <strong>Education:</strong> {employeeData.education}
              </BulletedItem>
              <BulletedItem color="#f56565">
                <strong>Languages:</strong> {employeeData.languages}
              </BulletedItem>
            </div>
          </motion.div>
        </div>
      </motion.div>
    ) : (
      <ResumeForm 
        initialData={employeeData}
        onSave={handleSaveResume}
        onCancel={() => setIsEditing(false)}
      />
    )
  );

  const renderVacanciesTab = () => (
    <motion.div 
      className="vacancies-content"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <div className="vacancies-header">
        <h2>üìã Available Vacancies</h2>
        <p>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏</p>
      </div>

      <div className="vacancies-grid">
        {vacancies.map((vacancy, index) => (
          <motion.div
            key={vacancy.id}
            className="vacancy-card"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.4, delay: index * 0.1 }}
          >
            <div className="vacancy-header">
              <h3>{vacancy.title}</h3>
              <span className="status-badge active">
                –ê–∫—Ç–∏–≤–Ω–∞—è
              </span>
            </div>
            
            <div className="vacancy-details">
              <div className="detail-item">
                <span className="label">–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç:</span>
                <span className="value">{vacancy.department}</span>
              </div>
              <div className="detail-item">
                <span className="label">–£—Ä–æ–≤–µ–Ω—å:</span>
                <span className="value">{vacancy.level}</span>
              </div>
              <div className="detail-item">
                <span className="label">–õ–æ–∫–∞—Ü–∏—è:</span>
                <span className="value">{vacancy.location}</span>
              </div>
              <div className="detail-item">
                <span className="label">–ó–∞—Ä–ø–ª–∞—Ç–∞:</span>
                <span className="value salary">{vacancy.salary}</span>
              </div>
            </div>

            <div className="vacancy-requirements">
              <h4>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:</h4>
              <div className="bulleted-list">
                {vacancy.requirements.map((requirement, reqIndex) => (
                  <BulletedItem key={reqIndex} color="#667eea">
                    {requirement}
                  </BulletedItem>
                ))}
              </div>
            </div>

            <button className="apply-btn">
              –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É
            </button>
          </motion.div>
        ))}
      </div>
    </motion.div>
  );

  return (
    <div className="employee-profile">
      <motion.header 
        className="profile-header"
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        <div className="header-content">
          <img src="/logo512.png" alt="Logo" className="logo" />
          <h1>Employee Portal</h1>
          <div className="header-actions">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              onClick={handleLogout}
              className="logout-btn"
            >
              Logout
            </motion.button>
          </div>
        </div>
      </motion.header>

      <div className="tabs-navigation">
        <button 
          className={`tab-btn ${activeTab === 'profile' ? 'active' : ''}`}
          onClick={() => setActiveTab('profile')}
        >
          üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
        </button>
        <button 
          className={`tab-btn ${activeTab === 'vacancies' ? 'active' : ''}`}
          onClick={() => setActiveTab('vacancies')}
        >
          üìã –í–∞–∫–∞–Ω—Å–∏–∏
        </button>
      </div>

      {activeTab === 'profile' && !isEditing && (
        <div className="edit-profile-btn">
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={() => setIsEditing(true)}
            className="edit-btn"
          >
            {employeeData.resume ? 'Edit Resume' : 'Create Resume'}
          </motion.button>
        </div>
      )}

      {activeTab === 'profile' ? renderProfileTab() : renderVacanciesTab()}
    </div>
  );
};

export default EmployeeProfile;